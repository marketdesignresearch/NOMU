import hpolib.benchmarks.synthetic_functions as hpobench
from hpolib.benchmarks.synthetic_functions.rosenbrock import Rosenbrock5D as RB5d
from hpolib.benchmarks.synthetic_functions.rosenbrock import Rosenbrock10D as RB10d
from hpolib.benchmarks.synthetic_functions.rosenbrock import Rosenbrock20D as RB20d
import numpy as np
from bayesian_optimization.functions.abstract_function import AbstractFunction


m = 10

def Michalewicz(x, d_in):
    m_sum = 0
    for ii in range(1, d_in + 1):
        m_sum += np.sin(x[ii-1])*np.sin((ii*(x[ii-1])**2)/np.pi)**(2*m)
    return -m_sum

class Michalewicz2D(AbstractFunction):

    ORIGINAL_MIN_ARGUMENT = np.array([[
        2.2029055201726093460746379110326517292788854905680,
        1.5707963267948966192313216916397514420985846996876
    ]])
    ORIGINAL_MAX_ARGUMENT = np.array([[0., 0.]])

    ORIGINAL_MAX = Michalewicz(ORIGINAL_MAX_ARGUMENT[0], 2)
    ORIGINAL_MIN = Michalewicz(ORIGINAL_MIN_ARGUMENT[0], 2)

    ORIGINAL_UPPER_BOUNDS = np.array([np.pi]*2)
    ORIGINAL_LOWER_BOUNDS = np.array([0.]*2)

    INVERT = True

    @classmethod
    def base_function(cls, x):
        return Michalewicz(np.array(x), 2)


class Michalewicz5D(AbstractFunction):

    dim = 5

    ORIGINAL_MIN_ARGUMENT = np.array([[
        2.2029055201726093460746379110326517292788854905680,
        1.5707963267948966192313216916397514420985846996876,
        1.2849915705529243598923898692635908713308419855189,
        1.9230584698663628431522153277235576781326220186671,
        1.7204697725658412800812477647755658283874805491471
    ]])
    ORIGINAL_MAX_ARGUMENT = np.array([[0.]*dim])

    ORIGINAL_MAX = Michalewicz(ORIGINAL_MAX_ARGUMENT[0], dim)
    ORIGINAL_MIN = Michalewicz(ORIGINAL_MIN_ARGUMENT[0], dim)

    ORIGINAL_UPPER_BOUNDS = np.array([np.pi]*dim)
    ORIGINAL_LOWER_BOUNDS = np.array([0.]*dim)

    INVERT = True

    @classmethod
    def base_function(cls, x):
        return Michalewicz(np.array(x), 5)


class Michalewicz10D(AbstractFunction):

    dim = 10

    ORIGINAL_MIN_ARGUMENT = np.array([[
        2.2029055201726093460746379110326517292788854905680,
        1.5707963267948966192313216916397514420985846996876,
        1.2849915705529243598923898692635908713308419855189,
        1.9230584698663628431522153277235576781326220186671,
        1.7204697725658412800812477647755658283874805491471,
        1.5707963267948966192313216916397514420985846996876,
        1.4544139713623790275883743638637156717244941612480,
        1.7560865209450263726836946897386786933799162215891,
        1.6557174168210291041643062955963066231276433548699,
        1.5707963267948966192313216916397514420985846996876
    ]])
    ORIGINAL_MAX_ARGUMENT = np.array([[0.]*dim])

    ORIGINAL_MAX = Michalewicz(ORIGINAL_MAX_ARGUMENT[0], dim)
    ORIGINAL_MIN = Michalewicz(ORIGINAL_MIN_ARGUMENT[0], dim)

    ORIGINAL_UPPER_BOUNDS = np.array([np.pi]*dim)
    ORIGINAL_LOWER_BOUNDS = np.array([0.]*dim)

    INVERT = True

    @classmethod
    def base_function(cls, x):
        return Michalewicz(np.array(x), 10)

class Michalewicz20D(AbstractFunction):

    dim = 20

    ORIGINAL_MIN_ARGUMENT = np.array([[
        2.2029055201726093460746379110326517292788854905680,
        1.5707963267948966192313216916397514420985846996876,
        1.2849915705529243598923898692635908713308419855189,
        1.9230584698663628431522153277235576781326220186671,
        1.7204697725658412800812477647755658283874805491471,
        1.5707963267948966192313216916397514420985846996876,
        1.4544139713623790275883743638637156717244941612480,
        1.7560865209450263726836946897386786933799162215891,
        1.6557174168210291041643062955963066231276433548699,
        1.5707963267948966192313216916397514420985846996876,
        1.4977288035560708743534439839711452436085411798723,
        1.6966163007974610578463803548770530254779180442432,
        1.6300760803964552812370090175045767127299987624569,
        1.5707963267948966192313216916397514420985846996876,
        1.5175461146676730294473314084454029553536009159325,
        1.6660645117262647936253139000824618465365507951459,
        1.6163286404365930698659566130557212719720983347208,
        1.5707963267948966192313216916397514420985846996876,
        1.5289070023558479307919633745987896569797979102040,
        1.6474563576741624750391636913821399388249701519792
    ]])
    ORIGINAL_MAX_ARGUMENT = np.array([[0.]*dim])

    ORIGINAL_MAX = Michalewicz(ORIGINAL_MAX_ARGUMENT[0], dim)
    ORIGINAL_MIN = Michalewicz(ORIGINAL_MIN_ARGUMENT[0], dim)

    ORIGINAL_UPPER_BOUNDS = np.array([np.pi]*dim)
    ORIGINAL_LOWER_BOUNDS = np.array([0.]*dim)

    INVERT = True

    @classmethod
    def base_function(cls, x):
        return Michalewicz(np.array(x), 20)